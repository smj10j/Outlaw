//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.h
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////

#import <Foundation/Foundation.h>
#import "cocos2d.h"
#import "lhConfig.h"
#ifdef LH_USE_BOX2D
#include "Box2D.h"
#endif
#ifdef __IPHONE_OS_VERSION_MAX_ALLOWED
#import <UIKit/UIKit.h>					// Needed for UIAccelerometerDelegate
#import "CCTouchDelegateProtocol.h"		// Touches only supported on iOS
#elif defined(__MAC_OS_X_VERSION_MAX_ALLOWED)
#import "CCEventDispatcher.h"
#endif

#define LHBezierNode LHBezier

@class LHSprite;
@class LHPathNode;
@class LHBezierBlendingInfo;
@class LHObserverPair;
@class LevelHelperLoader;

#ifdef __IPHONE_OS_VERSION_MAX_ALLOWED
@interface LHBezier : CCNode <CCStandardTouchDelegate, CCTargetedTouchDelegate>
#elif defined(__MAC_OS_X_VERSION_MAX_ALLOWED)
@interface LHBezier : CCNode <CCMouseEventDelegate>
#endif
{
    
    #if COCOS2D_VERSION >= 0x00020000
    CCGLProgram *mShaderProgram;
	GLint		mColorLocation;
    #endif
    
	bool isClosed;
	bool isTile;
	bool isVisible;
    bool drawBorder;
	bool isLine;
	bool isPath;
    float opacity;
	NSString* uniqueName;
#ifdef LH_USE_BOX2D
	b2Body* body; //can be 0
#endif
	NSMutableArray* pathPoints;
	//NSMutableSet* pathNodes;
	
	
	/////////for the tile feature
	CCTexture2D *texture;
	CGRect color;
	CGRect lineColor;
	float lineWidth;
	CGSize winSize;
	NSMutableArray* trianglesHolder;
	NSMutableArray* linesHolder;
    
    NSMutableArray* blendingTextures;
	CGSize imageSize;
    
    LHObserverPair* touchBeginObserver;
    LHObserverPair* touchMovedObserver;
    LHObserverPair* touchEndedObserver;
    
    LHObserverPair* tagTouchBeginObserver;
    LHObserverPair* tagTouchMovedObserver;
    LHObserverPair* tagTouchEndedObserver;
    
    bool swallowTouches;
#ifdef __MAC_OS_X_VERSION_MAX_ALLOWED
    LHObserverPair* rightMouseDownObserver;
    LHObserverPair* rightMouseDraggedObserver;
    LHObserverPair* rightMouseUpObserver;
    
    LHObserverPair* tagRightMouseDownObserver;
    LHObserverPair* tagRightMouseDraggedObserver;
    LHObserverPair* tagRightMouseUpObserver;
    bool mouseDownStarted;//keeps track if mouse down was started on the bezier
    bool r_mouseDownStarted;
#endif

    
    id  userCustomInfo;
}
@property (readonly) bool isClosed;
@property (readonly) bool isTile;
@property (readonly) bool isVisible;
@property (readonly) bool isLine;
@property (readwrite) bool swallowTouches;

+(id) bezierWithDictionary:(NSDictionary*)properties;
-(void)removeSelf; //use this to remove the bezier node entirely;


-(LevelHelperLoader*)parentLoader;

-(NSString*)uniqueName;
#ifdef LH_USE_BOX2D
-(b2Body*)body;
#endif

//THIS WORKS ONLY WHEN THE BEZIER SHAPE IS A TILE SHAPE
-(void) pushBlendingTextureNamed:(NSString*) texName
                      shouldTile:(bool)tile
                  blendingSource:(GLenum)blendSource
             blendingDestination:(GLenum)blendDestination;

//this uses the default blendSource GL_DST_COLOR and blendDestination GL_ZERO
-(void) pushBlendingTextureNamed:(NSString*) texName
                      shouldTile:(bool)tile; 

//this uses the default blendSource and blendDestination and tile is set to YES
-(void) pushBlendingTextureNamed:(NSString*) texName; 


//CLASS METHODS
//------------------------------------------------------------------------------
+(bool) isLHBezier:(id)object;

//TOUCH METHODS
//------------------------------------------------------------------------------
//Touches are detected only on bezier tile shapes.
//If the bezier is not a tile shape no touches events will be performed.

-(bool)isTouchedAtPoint:(CGPoint)point;

//Note: in order to make porting from ios to mac easy, left mouse events from mac are equivalent with touch events on ios

//selector needs to have this signature -(void) touchXXX:(LHTouchInfo*)info
//info will have all information regarding the touch (see API Documentation or LHTouchMgr.h)
//for generic touch on beziers with tag use the observers from LevelHelperLoader

//you must swallow touches before you register for a touch event
//touch begin observer should always be registered
//touch moved /ended don't work without touch begin
-(void)registerTouchBeginObserver:(id)observer selector:(SEL)selector DEPRECATED_ATTRIBUTE;
-(void)registerTouchBeganObserver:(id)observer selector:(SEL)selector;
-(void)registerTouchMovedObserver:(id)observer selector:(SEL)selector;
-(void)registerTouchEndedObserver:(id)observer selector:(SEL)selector;

#ifdef __MAC_OS_X_VERSION_MAX_ALLOWED
//for left mouse events use the touch observers from above 
-(void)registerRightMouseDownObserver:(id)observer selector:(SEL)selector;
-(void)registerRightMouseDraggedObserver:(id)observer selector:(SEL)selector;
-(void)registerRightMouseUpObserver:(id)observer selector:(SEL)selector;
#endif


#ifdef LH_USE_BOX2D
+(NSString*) uniqueNameForBody:(b2Body*)body;
+(LHBezier*) bezierForBody:(b2Body*)body;
+(int) tagForBody:(b2Body*)body;

-(void)removeBodyFromWorld;

-(void)setCollisionFilterCategory:(int)category;
-(void)setCollisionFilterMask:(int)mask;
-(void)setCollisionFilterGroup:(int)group;
#endif

//------------------------------------------------------------------------------
-(NSString*)userInfoClassName;
-(id)userInfo;

@end	
